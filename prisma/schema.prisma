// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_PRISMA_URL")
}

// Modelo para a tabela "user"
model User {
  id                 String    @id @default(uuid())
  username           String    @unique
  password           String
  create_date        DateTime  @default(now())
  updated_date       DateTime  @default(now())
  last_login         DateTime?
  hach_refresh_token String?

  // Chave prim√°ria
  @@map("user")
}

model Vacancy {
  id                 String               @unique @default(uuid())
  name               String
  sector             String
  description        String
  requests           String
  desirable          String
  created_at         DateTime             @default(now())
  disabled_at        DateTime?
  participantVacancy ParticipantVacancy[]
}

model ParticipantVacancy {
  id          String    @unique @default(uuid())
  name        String
  cpf         String
  rg          String
  email       String
  phone       String
  created_at  DateTime  @default(now())
  disabled_at DateTime?
  idVacancy   String
  Vacancy     Vacancy   @relation(fields: [idVacancy], references: [id])
}

model shop {
  id           String      @unique @default(uuid())
  shopName     String
  address      String
  location     String
  phone        String
  whatsapp     String
  main_point   Boolean
  disabled_at  DateTime?
  neighborhood locations[]
}

model locations {
  id              String            @unique @default(uuid())
  city            String
  zip_code        String
  state           String
  neighborhood    String?
  street          String?
  idShop          String?
  disabled_at     DateTime?
  shop            shop?             @relation(fields: [idShop], references: [id])
  plainsLocations plainsLocations[]
}

model plains {
  id                 String            @unique @default(uuid())
  visibleName        String
  internalName       String
  price              String
  discountPrice      String?
  idProfileBandwidth String
  profileBandwidth   profileBandwidth  @relation(fields: [idProfileBandwidth], references: [id])
  disabled_at        DateTime?
  PlainsBenefits     plainsBenefits[]
  plainsLocations    plainsLocations[]
}

model profileBandwidth {
  id                String    @unique @default(uuid())
  description       String
  uploadBandwidth   String
  downloadBandwidth String
  disabled_at       DateTime?
  plains            plains[]
}

model benefits {
  id             String           @unique @default(uuid())
  name           String
  PlainsBenefits plainsBenefits[]
}

model plainsBenefits {
  idPlains   String
  idBenefits String
  plain      plains   @relation(fields: [idPlains], references: [id])
  benefits   benefits @relation(fields: [idBenefits], references: [id])

  @@id([idBenefits, idPlains])
}

model plainsLocations {
  idPlains    String
  idLocations String
  plain       plains    @relation(fields: [idPlains], references: [id])
  locations   locations @relation(fields: [idLocations], references: [id])

  @@id([idLocations, idPlains])
}

model basicConfiguration {
  //Central do cliente
  urlCentralCliente String @unique @default("http://localhost")

  //Meditores develocidate
  urlSpeedTest    String
  urlMinhaConexao String

  //Social Midia
  urlFacebook  String
  urlInstagram String
  urlWhatsapp  String

  //contatos
  emailAtendimento  String
  emailComercial    String
  telefonePrincipal String

  //localizacao
  urlLocalizacao String
}
